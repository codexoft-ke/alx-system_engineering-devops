# Scale Up – Advanced Web Infrastructure
![Alt text](3-scale_up.png "One Server Web Infrastructure")
## Whiteboard Design – Scaled-Up Infrastructure

### Step-by-step request flow
1. **User opens** `www.foobar.com`.
2. **DNS resolution** returns the IP address of the **load balancer cluster**.
3. Traffic goes to **Load Balancer 1** or **Load Balancer 2** (HAProxy in **cluster mode** for high availability).
4. The active load balancer forwards requests to **Web Servers**.
5. Web servers handle **static content** and forward dynamic requests to **Application Servers**.
6. Application servers run backend code and communicate with the **Database Cluster** (Primary-Replica).
7. The database processes the request and returns data to the application server → web server → load balancer → user.

---

## Why each additional element is added
- **Extra Load Balancer (Cluster Mode)** – Prevents the load balancer from being a single point of failure. If one fails, the other takes over instantly.  
- **Dedicated Web Server** – Specializes in serving static files and handling HTTP requests efficiently.  
- **Dedicated Application Server** – Runs business logic and backend code separately from web server functions.  
- **Dedicated Database Server** – Ensures database performance is not affected by web or app server workloads.  

---

## Application Server vs. Web Server
- **Web Server**:
  - Handles incoming HTTP/HTTPS requests.
  - Serves static files (HTML, CSS, JS, images).
  - Passes dynamic requests to the application server.
  - Examples: Nginx, Apache.

- **Application Server**:
  - Runs backend business logic.
  - Processes requests for dynamic content.
  - Connects to the database to retrieve or store data.
  - Examples: PHP-FPM, Gunicorn, uWSGI, Node.js servers.

---

## Infrastructure Layout (Text Diagram)

