## **Whiteboard Design – One Server Web Infrastructure**
![Alt text](0-simple_web_stack.png "One Server Web Infrastructure")
### **Step-by-step request flow**

1. **A user opens** their browser and types `www.foobar.com`.
2. The browser sends a **DNS request** to resolve `www.foobar.com` to an IP address.
3. The DNS server responds with the IP address `8.8.8.8` (our server).
4. The browser sends an **HTTP/HTTPS request** to the server at `8.8.8.8`.
5. The **web server (Nginx)** receives the request.
6. Nginx passes the request to the **application server** (e.g., Gunicorn, PHP-FPM).
7. The application server executes the **application code** (our codebase) to generate a response.
8. If the code needs data, it queries the **MySQL database**.
9. The database sends the requested data back to the application server.
10. The application server processes the data and sends it to Nginx.
11. Nginx returns the final response to the user’s browser.

---

### **Components**

| Component                        | Role                                                                                                                                                           |
| -------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Server**                       | A physical or virtual machine with CPU, RAM, storage, and an OS where all components (web server, application server, database) run.                           |
| **Domain Name (`foobar.com`)**   | Human-friendly identifier for our website, so users don’t need to remember the IP address.                                                                     |
| **DNS Record**                   | The `www` in `www.foobar.com` is a **CNAME** (alias) or an **A record** pointing to `8.8.8.8`. In our design, we’ll use an **A record** for direct IP mapping. |
| **Web Server (Nginx)**           | Handles incoming HTTP/HTTPS requests, serves static files, and forwards dynamic requests to the application server.                                            |
| **Application Server**           | Runs the backend application code (e.g., Python, PHP, Node.js) and processes logic before sending a response.                                                  |
| **Application Files (Codebase)** | Our website’s code — HTML, CSS, JavaScript, backend scripts — stored on the server.                                                                            |
| **Database (MySQL)**             | Stores and manages structured data (users, posts, products, etc.) for the application.                                                                         |

---

### **Communication**

* **Protocol:** The server communicates with the user’s browser using **HTTP** or **HTTPS**.
* **Database Connection:** The application server communicates with MySQL using the MySQL protocol over TCP.
* **Internal Communication:** Nginx ↔ Application Server via FastCGI, WSGI, or HTTP (depending on stack).

---

### **Issues with This Infrastructure**

1. **Single Point of Failure (SPOF)**

   * If the server crashes, everything (website, app, database) goes offline.

2. **Downtime During Maintenance**

   * Deploying new code or restarting Nginx/MySQL causes temporary website downtime.

3. **No Scalability**

   * Cannot handle large spikes in traffic — all services share one machine’s CPU, RAM, and disk.
