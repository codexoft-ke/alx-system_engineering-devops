# Whiteboard Design – Three Server Web Infrastructure
![Alt text](1-distributed_web_infrastructure.png "One Server Web Infrastructure")
## Step-by-step request flow

1. **User opens** `www.foobar.com` in their browser.
2. **DNS resolution** returns the IP address of the **load balancer**.
3. The **load balancer (HAProxy)** receives the request.
4. HAProxy distributes the request to one of the **two backend servers** based on the chosen algorithm (e.g., Round Robin).
5. Each backend server has:
   - **Nginx Web Server**
   - **Application Server** (runs the codebase)
   - The application queries the **MySQL Database Cluster** (Primary-Replica).
6. The **Primary Database** handles writes; the **Replica Database** handles reads.
7. Data is returned to the application server → web server → load balancer → user.

---

## Why each additional element is added

- **Load Balancer (HAProxy)**: Distributes incoming requests between servers to improve availability and performance.
- **Additional Backend Server**: Increases fault tolerance and allows handling more concurrent users.
- **Database Primary-Replica Setup**: Separates read and write operations for performance and redundancy.

---

## Load Balancer Algorithm

- **Round Robin**: Requests are distributed sequentially to each server in turn.
  - Example: Request 1 → Server A, Request 2 → Server B, Request 3 → Server A, and so on.

---

## Active-Active vs. Active-Passive

- **Active-Active**: All servers handle traffic simultaneously (our setup).
- **Active-Passive**: One server is active, and the other is on standby, only taking over if the active server fails.

---

## Primary-Replica Database Cluster

- **Primary Node**: Handles **write** operations (INSERT, UPDATE, DELETE).
- **Replica Node**: Handles **read** operations (SELECT). It receives data updates from the primary asynchronously.
- **Application**: Sends writes to Primary, reads to Replica.

---

## Issues with This Infrastructure

1. **SPOF**:
   - Load balancer is a single point of failure (if it fails, all traffic is blocked).
2. **Security Issues**:
   - No firewall, no HTTPS → vulnerable to attacks and data interception.
3. **No Monitoring**:
   - No system in place to track performance, detect failures, or alert admins.
